1
00:00:02,980 --> 00:00:07,799
Ever stumbled upon these three little dots in
Python and wondered what they are for?

2
00:00:09,840 --> 00:00:14,499
Welcome to one minute Python, and today we'll be
talking about these three triple dots.

3
00:00:16,299 --> 00:00:18,420
These dots are formally called ellipsis.

4
00:00:19,379 --> 00:00:21,759
It's a unique built-in constant object.

5
00:00:22,319 --> 00:00:27,000
Think of it like true, false or none. There is
only one instance of it.

6
00:00:28,019 --> 00:00:32,220
You can compare triple dots with the ellipsis
object using its operator.

7
00:00:33,119 --> 00:00:34,359
It evaluates to true.

8
00:00:35,239 --> 00:00:40,139
And checking its type with type function reveals
it belongs to the ellipsis class.

9
00:00:41,500 --> 00:00:43,399
Now, how do you actually use it?

10
00:00:44,798 --> 00:00:49,758
One common place is as a placeholder in a function
or method definition.

11
00:00:49,838 --> 00:00:51,679
It is used to create empty blocks,

12
00:00:52,338 --> 00:00:53,659
similar to pass keyword.

13
00:00:54,979 --> 00:00:58,539
Using ellipsis can sometimes serve as a more
explicit signal

14
00:00:59,259 --> 00:01:02,079
that real code implementation is pending here.

15
00:01:02,959 --> 00:01:06,320
It's especially useful in stubs or abstract
methods.

16
00:01:07,939 --> 00:01:10,379
Ellipses are also used in type hinting.

17
00:01:11,419 --> 00:01:16,000
In the first example, ellipsis acts as a wild card
for arguments.

18
00:01:16,599 --> 00:01:18,139
It signifies a callable

19
00:01:18,739 --> 00:01:22,199
that can accept any number or type of parameters.

20
00:01:23,319 --> 00:01:26,599
Similarly, it's used with generic types like
tuples.

21
00:01:27,119 --> 00:01:31,739
In the second example, it defines a tuple that
must start with an

22
00:01:31,759 --> 00:01:35,919
integer, but can then be followed by any number of
additional integers.

23
00:01:36,699 --> 00:01:41,680
It's a concise way to annotate variable length
sequences where you know the type of

24
00:01:41,699 --> 00:01:42,479
the elements.

25
00:01:43,919 --> 00:01:48,239
Finally, you will see this a lot when working with
Pydantic library.

26
00:01:49,159 --> 00:01:52,359
When defining fields or parameters using ellipsis,

27
00:01:53,000 --> 00:01:57,219
it tells the library that this field or parameter
is mandatory.

28
00:01:58,459 --> 00:02:01,019
It must be provided when creating an object.

29
00:02:01,899 --> 00:02:05,460
This is the same as assigning ellipsis to default
parameter.

30
00:02:06,479 --> 00:02:11,239
Internally, Pydantic checks if default value is
the ellipsis

31
00:02:11,259 --> 00:02:15,059
object, and if so, they mark the field as
required.

32
00:02:17,759 --> 00:02:20,620
That's all for the ellipsis. Thanks for watching.
